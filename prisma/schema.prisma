generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROFESSIONAL
  CUSTOMER
}

enum QuestionType {
  CUSTOMER
  PROFESSIONAL
  PROFILE_FAQ
}

enum QuestionInputType {
  TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum CompanySize {
  SOLO
  SMALL_TEAM // 2-10 employees
  MEDIUM_TEAM // 11-50 employees
  LARGE_TEAM // 51+ employees
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  name               String?
  password           String
  role               UserRole   @default(CUSTOMER)
  status             UserStatus @default(ACTIVE)
  onboardingComplete Boolean    @default(false)

  professionalProfile ProfessionalProfile?
  postedLeads         Lead[]               @relation("CustomerLeads")
  // purchasedLeads      Lead[]               @relation("PurchasedLeads")
  transactions        Transaction[]
  customerRequests    CustomerRequest[]
  bookings            Booking[]
  reviews             Review[]
  professionalAnswers ProfessionalAnswer[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  CreditPurchase      CreditPurchase[]
  LeadAssignment      LeadAssignment[]
  Lead                Lead[]
}

model CreditPackage {
  id             String           @id @default(cuid())
  name           String
  description    String?
  credits        Int
  price          Float
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  CreditPurchase CreditPurchase[]
}

model CreditPurchase {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  creditPackageId String
  creditPackage   CreditPackage @relation(fields: [creditPackageId], references: [id])
  amountPaid      Float
  transactionId   String        @unique
  purchasedAt     DateTime      @default(now())
}

model ProfessionalProfile {
  id                 String                 @id @default(cuid())
  userId             String                 @unique
  user               User                   @relation(fields: [userId], references: [id])
  credits            Int                    @default(0)
  companyName        String?
  companyLogoUrl     String?
  profilePictureUrl  String?
  companyEmail       String?
  companyPhoneNumber String?
  websiteUrl         String?
  locations          ProfessionalLocation[]

  companySize CompanySize? @default(SOLO)
  yearFounded Int?
  bio         String?      @db.Text

  photos      ProfilePhoto[]
  socialMedia Json?

  phoneNumber String?
  isVerified  Boolean   @default(false)
  services    Service[] @relation("ProfessionalServices")
  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProfessionalLocation {
  id           String  @id @default(cuid())
  postcode     String
  locationName String
  isPrimary    Boolean @default(false)

  profileId String
  profile   ProfessionalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, postcode])
}

model ProfilePhoto {
  id        String              @id @default(cuid())
  url       String?
  caption   String?
  profileId String
  profile   ProfessionalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())
}

model ProfessionalAnswer {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  answerText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, questionId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id               String                @id @default(cuid())
  name             String
  description      String?
  creditCost       Int?
  imageUrl         String?
  isActive         Boolean               @default(true)
  categoryId       String
  category         Category              @relation(fields: [categoryId], references: [id])
  professionals    ProfessionalProfile[] @relation("ProfessionalServices")
  questions        Question[]
  customerRequests CustomerRequest[]
  leads            Lead[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model Question {
  id        String               @id @default(cuid())
  text      String
  order     Int
  type      QuestionType         @default(CUSTOMER)
  inputType QuestionInputType    @default(SINGLE_CHOICE)
  serviceId String
  service   Service              @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  options   Option[]
  answers   ProfessionalAnswer[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CustomerRequest {
  id         String   @id @default(cuid())
  customerId String
  customer   User     @relation(fields: [customerId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  postcode   String
  answers    Json
  status     String   @default("open")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Booking    Booking?
}

model Booking {
  id                String              @id @default(cuid())
  customerRequestId String              @unique
  request           CustomerRequest     @relation(fields: [customerRequestId], references: [id])
  customerId        String
  customer          User                @relation(fields: [customerId], references: [id])
  professionalId    String
  professional      ProfessionalProfile @relation(fields: [professionalId], references: [id])
  bookingTime       DateTime
  status            String
  creditsCharged    Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  review            Review?
}

model Review {
  id             String              @id @default(cuid())
  rating         Int
  comment        String?
  bookingId      String              @unique
  booking        Booking             @relation(fields: [bookingId], references: [id])
  customerId     String
  customer       User                @relation(fields: [customerId], references: [id])
  professionalId String
  professional   ProfessionalProfile @relation(fields: [professionalId], references: [id])
  createdAt      DateTime            @default(now())
}

model CreditBundle {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Float
  credits      Int
  currency     String        @default("INR")
  isActive     Boolean       @default(true)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  budget      String?
  urgency     String
  // creditCost  Int
  status      String   @default("OPEN")
  answers     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId String
  customer   User   @relation("CustomerLeads", fields: [customerId], references: [id])

  serviceId   String
  service     Service          @relation(fields: [serviceId], references: [id])
  assignments LeadAssignment[]

  // purchasedBy User[] @relation("PurchasedLeads")
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([customerId])
  @@index([serviceId])
}

model LeadAssignment {
  id             String   @id @default(cuid())
  leadId         String
  lead           Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  professionalId String
  professional   User     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  status         String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([leadId, professionalId])
  @@index([leadId])
  @@index([professionalId])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentProvider {
  PHONEPE
  STRIPE
  RAZORPAY
}

model Transaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  bundleId String?
  bundle   CreditBundle? @relation(fields: [bundleId], references: [id])

  amount  Float
  credits Int

  status                TransactionStatus @default(PENDING)
  provider              PaymentProvider
  merchantTransactionId String            @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Configuration {
  key   String @id
  value String
}
